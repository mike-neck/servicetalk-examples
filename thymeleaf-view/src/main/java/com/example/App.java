/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.example;

import io.servicetalk.concurrent.api.Single;
import io.servicetalk.http.api.*;
import io.servicetalk.http.netty.HttpServers;
import io.servicetalk.http.router.predicate.HttpPredicateRouterBuilder;
import io.servicetalk.serialization.api.SerializationProvider;
import org.jetbrains.annotations.NotNull;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.util.Map;
import java.util.Optional;

public class App implements HttpService {

    private static final Logger logger = LoggerFactory.getLogger(App.class);

    public static void main(String[] args) throws Exception {
        HttpServers.forPort(8080)
                .listenStreamingAndAwait(router())
                .awaitShutdown();
    }

    private static StreamingHttpService router() {
     return    new HttpPredicateRouterBuilder()
                .whenMethod(HttpRequestMethod.GET)
                .andPathMatches("/")
                .thenRouteTo(new App(ThymeleafSerializationProvider.create()))
                .buildStreaming();
    }

    private final HttpSerializationProvider serializationProvider;

    private App(SerializationProvider provider) {
        this(HttpSerializationProviders.serializationProvider(provider,
                httpHeaders -> httpHeaders.add("content-type", "text/html; charset=UTF-8"),
                headers -> true));
    }

    private App(HttpSerializationProvider serializationProvider) {
        this.serializationProvider = serializationProvider;
    }

    @NotNull
    @Override
    public Single<HttpResponse> handle(
            @NotNull HttpServiceContext ctx, 
            @NotNull HttpRequest request,
            @NotNull HttpResponseFactory responseFactory) {
        String message = Optional.ofNullable(request.queryParameter("message"))
                .orElse("hello");
        OffsetDateTime time = OffsetDateTime.now(ZoneOffset.ofHours(9));
        logger.info("message: {}, time: {}", message, time);

        Obj obj = new Obj(message, time);
        Map<String, Object> map = Map.of("obj", obj);
        View view = new View("index", map);

        HttpResponse httpResponse = responseFactory
                .ok()
                .payloadBody(view, serializationProvider.serializerFor(View.class));
        return Single.succeeded(httpResponse);
    }
}
